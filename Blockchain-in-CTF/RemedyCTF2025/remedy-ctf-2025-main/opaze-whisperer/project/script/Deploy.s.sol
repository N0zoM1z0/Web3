// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import "forge-ctf/CTFDeployer.sol";

import "src/Challenge.sol";

import "src/Opaze.sol";
import "src/OpazeWhisperer.sol";

contract Deploy is CTFDeployer {
    function deploy(address system, address player) internal override returns (address challenge) {
        vm.startBroadcast(system);

        Opaze opaze = new Opaze("Opaze", "OPAZ");

        address opazeWhisperer = deployOpazeWhisperer(address(opaze));
        OpazeWhisperer(opazeWhisperer).setAnswer("answer");
        
        challenge = address(new Challenge(player, address(opaze), opazeWhisperer));

        // give one ether to the player
        payable(player).transfer(1 ether);

        vm.stopBroadcast();
    }

    function deployOpazeWhisperer(address opaze) internal returns (address) {
        // This is a workaround due to limitations in forge regarding different compiler versions.
        // It is not related to the challenge solution.
        
        // Bytecode for OpazeWhisperer
        bytes 
            memory bytecode = hex"608060405234801561000f575f5ffd5b5060405161065238038061065283398101604081905261002e91610081565b5f80546001600160a01b0384166001600160a01b03199182161790915560018054909116331790556506b2000000006100656106b2565b505050610150565b634e487b7160e01b5f52604160045260245ffd5b5f5f60408385031215610092575f5ffd5b82516001600160a01b03811681146100a8575f5ffd5b60208401519092506001600160401b038111156100c3575f5ffd5b8301601f810185136100d3575f5ffd5b80516001600160401b038111156100ec576100ec61006d565b604051601f8201601f19908116603f011681016001600160401b038111828210171561011a5761011a61006d565b604052818152828201602001871015610131575f5ffd5b8160208401602083015e5f602083830101528093505050509250929050565b6104f58061015d5f395ff3fe608060405260043610610054575f3560e01c806355c9f8071461005857806356049a86146100795780636614bed5146100a3578063718e6302146100d957806385bb7d69146100ec5780638da5cb5b1461010f575b5f5ffd5b348015610063575f5ffd5b506100776100723660046102e1565b61012e565b005b348015610084575f5ffd5b5061008d610173565b60405161009a9190610394565b60405180910390f35b3480156100ae575f5ffd5b505f546100c1906001600160a01b031681565b6040516001600160a01b03909116815260200161009a565b6100776100e73660046102e1565b610194565b3480156100f7575f5ffd5b5061010160025481565b60405190815260200161009a565b34801561011a575f5ffd5b506001546100c1906001600160a01b031681565b6001546001600160a01b03163314610144575f5ffd5b806040516020016101559190610394565b60408051601f19818403018152919052805160209091012060025550565b606060405180610120016040528060e281526020016103de60e29139905090565b6002545f036101db5760405162461bcd60e51b815260206004820152600e60248201526d105b9cddd95c881b9bdd081cd95d60921b60448201526064015b60405180910390fd5b600254816040516020016101ef9190610394565b60405160208183030381529060405280519060200120146102455760405162461bcd60e51b815260206004820152601060248201526f24b731b7b93932b1ba1030b739bbb2b960811b60448201526064016101d2565b600180546001600160a01b0319163390811782555f546040516323b872dd60e01b8152306004820152602481019290925260448201929092526001600160a01b03909116906323b872dd906064015f604051808303815f87803b1580156102aa575f5ffd5b505af11580156102bc573d5f5f3e3d5ffd5b5050505050565b6102cb6103c9565b565b634e487b7160e01b5f52604160045260245ffd5b5f602082840312156102f1575f5ffd5b813567ffffffffffffffff811115610307575f5ffd5b8201601f81018413610317575f5ffd5b803567ffffffffffffffff811115610331576103316102cd565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715610360576103606102cd565b604052818152828201602001861015610377575f5ffd5b816020840160208301375f91810160200191909152949350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52605160045260245ffdfe54686520637572696f7573206d696e64207468617420646172657320746f207365656b2c0a4d7573742070696572636520746865207665696c2c2062656e6561746820746865207065616b2e0a5468726f75676820736861646f7773206361737420627920616e6369656e74206c6f72652c0a5768657265204f70617a6520676c65616d73206f6e2068696464656e20666c6f6f722e0a496e206465707468732077686572652066657720646172652076656e74757265206661722c0a54686973206372797374616c207368696e6573206c696b652066616c6c656e20737461722ea264697066735822122016897bdc93a30b3fca54d96afce958320fe11bc19abe741a01909ac31f98832464736f6c634300081c0033";

        // Arguments encoded for OpazeWhisperer : address opaze || bytes memory y
        bytes 
            memory arguments = hex"00000000000000000000000012345678901234567890123456789012345678900000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000068b5b6106836107a8f360806040526004361061006e575f3560e01c80636614bed51161004c5780636614bed5146100d1578063718e63021461010757806385bb7d691461011a5780638da5cb5b1461013d575f5ffd5b8063416c87011461007257806355c9f8071461008857806356049a86146100a7575b5f5ffd5b34801561007d575f5ffd5b5061008661015c565b005b348015610093575f5ffd5b506100866100a236600461046f565b61017d565b3480156100b2575f5ffd5b506100bb6101c2565b6040516100c89190610522565b60405180910390f35b3480156100dc575f5ffd5b505f546100ef906001600160a01b031681565b6040516001600160a01b0390911681526020016100c8565b61008661011536600461046f565b6101e3565b348015610125575f5ffd5b5061012f60025481565b6040519081526020016100c8565b348015610148575f5ffd5b506001546100ef906001600160a01b031681565b61016461042b565b6102d18152602081015161017a9063ffffffff16565b50565b6001546001600160a01b03163314610193575f5ffd5b806040516020016101a49190610522565b60408051601f19818403018152919052805160209091012060025550565b606060405180610120016040528060e2815260200161056c60e29139905090565b6002545f0361022a5760405162461bcd60e51b815260206004820152600e60248201526d105b9cddd95c881b9bdd081cd95d60921b60448201526064015b60405180910390fd5b6002548160405160200161023e9190610522565b60405160208183030381529060405280519060200120146102945760405162461bcd60e51b815260206004820152601060248201526f24b731b7b93932b1ba1030b739bbb2b960811b6044820152606401610221565b600180546001600160a01b03191633908117909155610453903b600a8111156102b957005b50600260085f333c505f5160f01c6102cd81565b5050565b60645b3681101561017a5780355f1a6113375c0280156103085760118114610330576022811461038c57603381146103d5576103ee565b7f546865206d616368696e6520736c656570732e2e2e205a7a5a7a5a7a000000005f52601c5ffd5b60018201355f1a6020811115610368577f43414e4e4f542050555348203e3332204259544553204f4e20562d535441434b5f52601c5ffd5b60015f5c015f5d60028301358160200360031b1c5f5c5d91909101600101906103ee565b6103946103f7565b61039c6103f7565b6103a46103f7565b5f5f6103ae6103f7565b8385875af16103cd576a10d053130811905253115160aa1b5f52600a5ffd5b5050506103ee565b600182013560405c52602060405c0160405d6020820191505b506001016102d4565b5f5f5c610416576c562d535441434b20454d50545960981b5f52600d5ffd5b5f5c5c90505f5f5c5d5f195f5c015f5d90565b565b60405180604001604052806002905b61045381526020019060019003908161043a5790505090565b610429610557565b634e487b7160e01b5f52604160045260245ffd5b5f6020828403121561047f575f5ffd5b813567ffffffffffffffff811115610495575f5ffd5b8201601f810184136104a5575f5ffd5b803567ffffffffffffffff8111156104bf576104bf61045b565b604051601f8201601f19908116603f0116810167ffffffffffffffff811182821017156104ee576104ee61045b565b604052818152828201602001861015610505575f5ffd5b816020840160208301375f91810160200191909152949350505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b634e487b7160e01b5f52605160045260245ffdfe54686520637572696f7573206d696e64207468617420646172657320746f207365656b2c0a4d7573742070696572636520746865207665696c2c2062656e6561746820746865207065616b2e0a5468726f75676820736861646f7773206361737420627920616e6369656e74206c6f72652c0a5768657265204f70617a6520676c65616d73206f6e2068696464656e20666c6f6f722e0a496e206465707468732077686572652066657720646172652076656e74757265206661722c0a54686973206372797374616c207368696e6573206c696b652066616c6c656e20737461722ea2646970667358221220733dac3e7762203a5b60016113375d3456c7b06c54e165c570bf2655f2c0ef9f64736f6c634300081c0033000000000000000000000000000000000000000000";

        // Copy Opaze address into arguments bytes 13-32
        assembly {
            mstore(add(arguments, 0x20), opaze)
        }

        bytecode = abi.encodePacked(bytecode, arguments);

        address addr;
        assembly {
            addr := create(0, add(bytecode, 0x20), mload(bytecode))
        }

        return addr;
    }
}
